{"version":3,"sources":["../src/index.ts"],"names":["yargs","command","snapshot","argv","saveToSameFolder","direct","root","process","cwd","fileName","path","relative","name","testNameRegex","testName","match","program","ts","createProgram","checker","getTypeChecker","source","getSourceFile","forEachChild","node","isInterfaceDeclaration","symbol","getSymbolAtLocation","data","members","forEach","loc","info","push"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEAA,eAAMC,OAAN,CAAc,UAAd,EAA0B,iCAA1B,EAA6D,EAA7D,EAAiEC,QAAjE,EAA2EC,IAA3E;;AAEA,eAAeD,QAAf,CAAwBC,IAAxB,EAAoD;AAClD,QAAMC,gBAAgB,GAAGD,IAAI,CAACE,MAAL,KAAgB,MAAzC;AAEA,QAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,EAAb;;AACA,QAAMC,QAAQ,GAAGC,cAAKC,QAAL,CAAcL,IAAd,EAAoBH,IAAI,CAACS,IAAzB,CAAjB;;AACA,oBAAM,YAAWH,QAAS,EAA1B;AAEA,QAAMI,aAAa,GAAG,eAAtB;AACA,QAAMC,QAAQ,GAAGL,QAAQ,CAACM,KAAT,CAAeF,aAAf,EAA8B,CAA9B,CAAjB;AAEA,QAAMG,OAAO,GAAGC,EAAE,CAACC,aAAH,CAAiB,CAACT,QAAD,CAAjB,EAA6B,EAA7B,CAAhB;AACA,QAAMU,OAAO,GAAGH,OAAO,CAACI,cAAR,EAAhB;AACA,QAAMC,MAAM,GAAGL,OAAO,CAACM,aAAR,CAAsBb,QAAtB,CAAf;;AAEA,MAAI,CAACY,MAAL,EAAa;AACX,uBAAM,oCAAN;AACA;AACD;;AAEDJ,EAAAA,EAAE,CAACM,YAAH,CAAgBF,MAAhB,EAAyBG,IAAD,IAAU;AAChC;AACA,QAAIP,EAAE,CAACQ,sBAAH,CAA0BD,IAA1B,CAAJ,EAAqC;AACnC,YAAME,MAAM,GAAGP,OAAO,CAACQ,mBAAR,CAA4BH,IAAI,CAACZ,IAAjC,CAAf;AACA,YAAMgB,IAAI,GAAG,EAAb;AACAF,MAAAA,MAAM,CAACG,OAAP,CAAeC,OAAf,CAAwBC,GAAD,IAAS;AAC9B,cAAMC,IAAI,GAAG,sCAAgBD,GAAhB,EAAqBZ,OAArB,CAAb;AACAS,QAAAA,IAAI,CAACK,IAAL,CAAUD,IAAV;AACD,OAHD;AAIA,8CAAiBJ,IAAjB,EAAuBd,QAAvB,EAAiCL,QAAjC,EAA2C;AAAEL,QAAAA;AAAF,OAA3C;AACD;AACF,GAXD;AAYD","sourcesContent":["import path from 'path';\nimport * as ts from 'typescript';\nimport yargs from 'yargs';\n\nimport { info, error } from './utils/logger';\nimport { serializeSymbol, TestPropsInfo } from './serializeSymbol';\nimport { generateTestFile } from './generateTestFile';\n\nyargs.command('g <name>', 'create a snapshot for component', {}, snapshot).argv;\n\nasync function snapshot(argv: yargs.Arguments<any>) {\n  const saveToSameFolder = argv.direct === 'true';\n\n  const root = process.cwd();\n  const fileName = path.relative(root, argv.name);\n  info(`Reading: ${fileName}`);\n\n  const testNameRegex = /[^\\/]+(?=\\.)/g;\n  const testName = fileName.match(testNameRegex)[0];\n\n  const program = ts.createProgram([fileName], {});\n  const checker = program.getTypeChecker();\n  const source = program.getSourceFile(fileName);\n\n  if (!source) {\n    error('Typescript source file is required');\n    return;\n  }\n\n  ts.forEachChild(source, (node) => {\n    // TODO: get also function and class, extract data from there like e.g. default values\n    if (ts.isInterfaceDeclaration(node)) {\n      const symbol = checker.getSymbolAtLocation(node.name);\n      const data = [] as TestPropsInfo[];\n      symbol.members.forEach((loc) => {\n        const info = serializeSymbol(loc, checker);\n        data.push(info);\n      });\n      generateTestFile(data, testName, fileName, { saveToSameFolder });\n    }\n  });\n}\n"],"file":"index.js"}